Parsing C:\Users\ambar\eclipse-workspace\Compiler_Project\CodeGenFULL-FA22.txt
0001 UNIT Codegen;
C:\Users\ambar\eclipse-workspace\Compiler_Project\CodeGenFULL-FA22
	UNIT_ | 	0015 | 	UNIT
--> Entering Program
	IDENT | 	0050 | 	Codegen
	SEMCO | 	0036 | 	;
0002 begin
	BEGIN | 	0011 | 	begin
 --> Entering Block
  --> Entering block-Body
0003 WRITELN("Full FALL22 Test File");
	WRTLN | 	0009 | 	WRITELN
   --> Entering Statement
    --> Entering handleWriteln
	OPARN | 	0034 | 	(
	ST_12 | 	0053 | 	Full FALL22 Test File
	CPARN | 	0035 | 	)
	SEMCO | 	0036 | 	;
    <-- Exiting handleWriteln
   <-- Exiting Statement
0004 
0005 factorial := 1;
	IDENT | 	0050 | 	factorial
   --> Entering Statement
    --> Entering Variable
	ASSIG | 	0037 | 	:=
    <-- Exiting Variable
	INCON | 	0051 | 	1
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
       --> Entering Unsigned Constant
        --> Entering UnsignedNumber
	SEMCO | 	0036 | 	;
        <-- Exiting UnsignedNumber
       <-- Exiting Unsigned Constant
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting Statement
0006 WRITELN("Enter the value 5 for n:");
	WRTLN | 	0009 | 	WRITELN
   --> Entering Statement
    --> Entering handleWriteln
	OPARN | 	0034 | 	(
	ST_12 | 	0053 | 	Enter the value 5 for n:
	CPARN | 	0035 | 	)
	SEMCO | 	0036 | 	;
    <-- Exiting handleWriteln
   <-- Exiting Statement
0007 readln(n);  {should be same result as doing n := 5;}
	REDLN | 	0010 | 	readln
   --> Entering Statement
    --> Entering handleReadln
	OPARN | 	0034 | 	(
	IDENT | 	0050 | 	n
     --> Entering Variable
	CPARN | 	0035 | 	)
     <-- Exiting Variable
	SEMCO | 	0036 | 	;
    <-- Exiting handleReadln
   <-- Exiting Statement
0008 count := 1;
	IDENT | 	0050 | 	count
   --> Entering Statement
    --> Entering Variable
	ASSIG | 	0037 | 	:=
    <-- Exiting Variable
	INCON | 	0051 | 	1
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
       --> Entering Unsigned Constant
        --> Entering UnsignedNumber
	SEMCO | 	0036 | 	;
        <-- Exiting UnsignedNumber
       <-- Exiting Unsigned Constant
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting Statement
0009 dowhile count <= n
	DOWHL | 	0014 | 	dowhile
   --> Entering Statement
    --> Entering DOWHILE
	IDENT | 	0050 | 	count
     --> Entering Rel Expression
      --> Entering SimpleExpression
       --> Entering Term
        --> Entering Factor
         --> Entering Variable
	LTEQL | 	0041 | 	<=
         <-- Exiting Variable
        <-- Exiting Factor
       <-- Exiting Term
      <-- Exiting SimpleExpression
	IDENT | 	0050 | 	n
      --> Entering SimpleExpression
       --> Entering Term
        --> Entering Factor
         --> Entering Variable
0010   begin
	BEGIN | 	0011 | 	begin
         <-- Exiting Variable
        <-- Exiting Factor
       <-- Exiting Term
      <-- Exiting SimpleExpression
     <-- Exiting Rel Expression
     --> Entering Statement
      --> Entering block-Body
0011   factorial := factorial*count;
	IDENT | 	0050 | 	factorial
       --> Entering Statement
        --> Entering Variable
	ASSIG | 	0037 | 	:=
        <-- Exiting Variable
	IDENT | 	0050 | 	factorial
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
           --> Entering Variable
	ASTRK | 	0031 | 	*
           <-- Exiting Variable
          <-- Exiting Factor
	IDENT | 	0050 | 	count
          --> Entering Factor
           --> Entering Variable
	SEMCO | 	0036 | 	;
           <-- Exiting Variable
          <-- Exiting Factor
         <-- Exiting Term
        <-- Exiting SimpleExpression
       <-- Exiting Statement
0012   count := count + 1
	IDENT | 	0050 | 	count
       --> Entering Statement
        --> Entering Variable
	ASSIG | 	0037 | 	:=
        <-- Exiting Variable
	IDENT | 	0050 | 	count
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
           --> Entering Variable
	ADDTN | 	0032 | 	+
           <-- Exiting Variable
          <-- Exiting Factor
         <-- Exiting Term
	INCON | 	0051 | 	1
         --> Entering Term
          --> Entering Factor
           --> Entering Unsigned Constant
            --> Entering UnsignedNumber
0013   end;
	END_1 | 	0012 | 	end
            <-- Exiting UnsignedNumber
           <-- Exiting Unsigned Constant
          <-- Exiting Factor
         <-- Exiting Term
        <-- Exiting SimpleExpression
       <-- Exiting Statement
	SEMCO | 	0036 | 	;
      <-- Exiting block-Body
     <-- Exiting Statement
    <-- Exiting DOWHILE
   <-- Exiting Statement
0014 WRITELN("The calculation of 5! is:"); {Expected result is 120}
	WRTLN | 	0009 | 	WRITELN
   --> Entering Statement
    --> Entering handleWriteln
	OPARN | 	0034 | 	(
	ST_12 | 	0053 | 	The calculation of 5! is:
	CPARN | 	0035 | 	)
	SEMCO | 	0036 | 	;
    <-- Exiting handleWriteln
   <-- Exiting Statement
0015 WRITELN(factorial);
	WRTLN | 	0009 | 	WRITELN
   --> Entering Statement
    --> Entering handleWriteln
	OPARN | 	0034 | 	(
	IDENT | 	0050 | 	factorial
	CPARN | 	0035 | 	)
	SEMCO | 	0036 | 	;
    <-- Exiting handleWriteln
   <-- Exiting Statement
0016 WRITELN(" "); {blank line}
	WRTLN | 	0009 | 	WRITELN
   --> Entering Statement
    --> Entering handleWriteln
	OPARN | 	0034 | 	(
	ST_12 | 	0053 | 	 
	CPARN | 	0035 | 	)
	SEMCO | 	0036 | 	;
    <-- Exiting handleWriteln
   <-- Exiting Statement
0017 
0018 {count should be 6 at this point}
0019 dowhile count > 1
	DOWHL | 	0014 | 	dowhile
   --> Entering Statement
    --> Entering DOWHILE
	IDENT | 	0050 | 	count
     --> Entering Rel Expression
      --> Entering SimpleExpression
       --> Entering Term
        --> Entering Factor
         --> Entering Variable
	GRTHN | 	0038 | 	>
         <-- Exiting Variable
        <-- Exiting Factor
       <-- Exiting Term
      <-- Exiting SimpleExpression
	INCON | 	0051 | 	1
      --> Entering SimpleExpression
       --> Entering Term
        --> Entering Factor
         --> Entering Unsigned Constant
          --> Entering UnsignedNumber
0020   begin
	BEGIN | 	0011 | 	begin
          <-- Exiting UnsignedNumber
         <-- Exiting Unsigned Constant
        <-- Exiting Factor
       <-- Exiting Term
      <-- Exiting SimpleExpression
     <-- Exiting Rel Expression
     --> Entering Statement
      --> Entering block-Body
0021   WRITELN(count);
	WRTLN | 	0009 | 	WRITELN
       --> Entering Statement
        --> Entering handleWriteln
	OPARN | 	0034 | 	(
	IDENT | 	0050 | 	count
	CPARN | 	0035 | 	)
	SEMCO | 	0036 | 	;
        <-- Exiting handleWriteln
       <-- Exiting Statement
0022   if count - 2 > 2 then
	IF_12 | 	0004 | 	if
       --> Entering Statement
	IDENT | 	0050 | 	count
        --> Entering Rel Expression
         --> Entering SimpleExpression
          --> Entering Term
           --> Entering Factor
            --> Entering Variable
	SUBTN | 	0033 | 	-
            <-- Exiting Variable
           <-- Exiting Factor
          <-- Exiting Term
	INCON | 	0051 | 	2
          --> Entering Term
           --> Entering Factor
            --> Entering Unsigned Constant
             --> Entering UnsignedNumber
	GRTHN | 	0038 | 	>
             <-- Exiting UnsignedNumber
            <-- Exiting Unsigned Constant
           <-- Exiting Factor
          <-- Exiting Term
         <-- Exiting SimpleExpression
	INCON | 	0051 | 	2
         --> Entering SimpleExpression
          --> Entering Term
           --> Entering Factor
            --> Entering Unsigned Constant
             --> Entering UnsignedNumber
	THEN_ | 	0005 | 	then
             <-- Exiting UnsignedNumber
            <-- Exiting Unsigned Constant
           <-- Exiting Factor
          <-- Exiting Term
         <-- Exiting SimpleExpression
        <-- Exiting Rel Expression
0023     WRITELN("Count - 2 is greater than 2")
	WRTLN | 	0009 | 	WRITELN
        --> Entering Statement
         --> Entering handleWriteln
	OPARN | 	0034 | 	(
	ST_12 | 	0053 | 	Count - 2 is greater than 2
	CPARN | 	0035 | 	)
0024   else
	ELSE_ | 	0006 | 	else
         <-- Exiting handleWriteln
        <-- Exiting Statement
0025     WRITELN("Count - 2 is less than or equal to 2");
	WRTLN | 	0009 | 	WRITELN
        --> Entering Statement
         --> Entering handleWriteln
	OPARN | 	0034 | 	(
	ST_12 | 	0053 | 	Count - 2 is less than or equal to 2
	CPARN | 	0035 | 	)
	SEMCO | 	0036 | 	;
         <-- Exiting handleWriteln
        <-- Exiting Statement
       <-- Exiting Statement
0026   count := count -1
	IDENT | 	0050 | 	count
       --> Entering Statement
        --> Entering Variable
	ASSIG | 	0037 | 	:=
        <-- Exiting Variable
	IDENT | 	0050 | 	count
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
           --> Entering Variable
	SUBTN | 	0033 | 	-
           <-- Exiting Variable
          <-- Exiting Factor
         <-- Exiting Term
	INCON | 	0051 | 	1
         --> Entering Term
          --> Entering Factor
           --> Entering Unsigned Constant
            --> Entering UnsignedNumber
0027   end;
	END_1 | 	0012 | 	end
            <-- Exiting UnsignedNumber
           <-- Exiting Unsigned Constant
          <-- Exiting Factor
         <-- Exiting Term
        <-- Exiting SimpleExpression
       <-- Exiting Statement
	SEMCO | 	0036 | 	;
      <-- Exiting block-Body
     <-- Exiting Statement
    <-- Exiting DOWHILE
   <-- Exiting Statement
0028 WRITELN("Count is: ");
	WRTLN | 	0009 | 	WRITELN
   --> Entering Statement
    --> Entering handleWriteln
	OPARN | 	0034 | 	(
	ST_12 | 	0053 | 	Count is: 
	CPARN | 	0035 | 	)
	SEMCO | 	0036 | 	;
    <-- Exiting handleWriteln
   <-- Exiting Statement
0029 WRITELN(count);
	WRTLN | 	0009 | 	WRITELN
   --> Entering Statement
    --> Entering handleWriteln
	OPARN | 	0034 | 	(
	IDENT | 	0050 | 	count
	CPARN | 	0035 | 	)
	SEMCO | 	0036 | 	;
    <-- Exiting handleWriteln
   <-- Exiting Statement
0030 WRITELN("All done.")
	WRTLN | 	0009 | 	WRITELN
   --> Entering Statement
    --> Entering handleWriteln
	OPARN | 	0034 | 	(
	ST_12 | 	0053 | 	All done.
	CPARN | 	0035 | 	)
0031 end. 
	END_1 | 	0012 | 	end
    <-- Exiting handleWriteln
   <-- Exiting Statement
	PERIO | 	0048 | 	.
  <-- Exiting block-Body
 <-- Exiting Block
Success.
<-- Exiting Program
Full FALL22 Test File
Enter the value 5 for n:
> 
